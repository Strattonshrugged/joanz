// Generated by CoffeeScript 1.4.0
(function() {
  var CartViewModel, CharmsViewModel, ready,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CharmsViewModel = (function() {

    function CharmsViewModel(cartVM) {
      this._addHeartCharm = __bind(this._addHeartCharm, this);

      this._designCustomCharm = __bind(this._designCustomCharm, this);

      var lettering, _i, _len, _ref,
        _this = this;
      this._cartVM = cartVM;
      this.isCustomState = ko.observable(false);
      this.designCharmBtn = {
        type: 'Design a Custom Charm',
        imgUrl: 'images/single_charm.jpg',
        clickCallback: this._designCustomCharm
      };
      this.heartCharmBtn = {
        type: 'Add a Heart Charm',
        imgUrl: 'images/heart_charm_spacer.jpg',
        clickCallback: this._addHeartCharm
      };
      this.charms = [
        {
          type: 'Single Charm',
          imgUrl: 'images/single_charm.jpg',
          selected: ko.observable(false),
          summaryNote: 'Single',
          sublabel: '+$20.00',
          cost: 2000
        }, {
          type: 'Double Charm',
          imgUrl: 'images/double_charm.jpg',
          selected: ko.observable(false),
          summaryNote: 'Double',
          sublabel: '+$23.00',
          cost: 2300
        }
      ];
      this.letterings = [
        {
          imgUrl: 'images/small_type.jpg',
          label: 'small letters',
          selected: ko.observable(false),
          lettering: ko.observable(''),
          summaryNote: 'Small Letters',
          maxLetters: 8
        }, {
          imgUrl: 'images/large_type.jpg',
          label: 'LARGE letters',
          selected: ko.observable(false),
          lettering: ko.observable(''),
          summaryNote: 'Large Letters',
          maxLetters: 4
        }, {
          imgUrl: 'images/mixed_type.jpg',
          label: 'MiXeD letters',
          selected: ko.observable(false),
          lettering: ko.observable(''),
          summaryNote: 'Mixed Letters',
          maxLetters: 5
        }
      ];
      this.borders = [
        {
          imgUrl: 'images/dots.jpg',
          label: 'Yes, add a dot border',
          selected: ko.observable(false),
          summaryNote: 'a dotted border'
        }, {
          imgUrl: 'images/no_dots.jpg',
          label: 'No border, please',
          selected: ko.observable(false),
          summaryNote: 'no border'
        }
      ];
      this.chains = [
        {
          imgUrl: 'images/20_inch_chain.jpg',
          label: 'Necklace (20 inches)',
          sublabel: '+$23.00',
          selected: ko.observable(false),
          summaryNote: '20-inch necklace',
          cost: 2300
        }, {
          imgUrl: 'images/7_inch_chain.jpg',
          label: 'Bracelet (7.5 inches)',
          sublabel: '+$12.00',
          selected: ko.observable(false),
          summaryNote: '7-inch bracelet',
          cost: 1200
        }, {
          imgUrl: 'images/no_chain.jpg',
          label: 'No Chain',
          sublabel: '',
          selected: ko.observable(false),
          summaryNote: '(chain not included)'
        }
      ];
      this.hearts = [
        {
          imgUrl: 'images/heart_charm_spacer.jpg',
          label: 'Yes, add a heart charm',
          sublabel: '+$20.00',
          selected: ko.observable(false),
          summaryNote: 'Yes',
          cost: 2000
        }, {
          imgUrl: 'images/single_charm_select.jpg',
          label: 'No heart charm, please',
          sublabel: '',
          selected: ko.observable(false),
          summaryNote: 'No'
        }
      ];
      _ref = this.letterings;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lettering = _ref[_i];
        lettering.remaining = (function(lettering) {
          return ko.computed(function(foo) {
            var left;
            left = lettering.maxLetters - lettering.lettering().length;
            return left + ' characters remaining';
          });
        })(lettering);
      }
      this.selectCharm = function(selectedCharm, event) {
        var charm, _j, _len1, _ref1;
        _ref1 = _this.charms;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          charm = _ref1[_j];
          charm.selected(charm.type === selectedCharm.type);
        }
        return true;
      };
      this.selectLettering = function(selectedLettering, event) {
        var _j, _len1, _ref1;
        _ref1 = _this.letterings;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          lettering = _ref1[_j];
          lettering.selected(lettering.label === selectedLettering.label);
        }
        return true;
      };
      this.selectBorder = function(selectedBorder, event) {
        var border, _j, _len1, _ref1;
        _ref1 = _this.borders;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          border = _ref1[_j];
          border.selected(border.label === selectedBorder.label);
        }
        return true;
      };
      this.selectChain = function(selectedChain, event) {
        var chain, _j, _len1, _ref1;
        _ref1 = _this.chains;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          chain = _ref1[_j];
          chain.selected(chain.label === selectedChain.label);
        }
        return true;
      };
      this.selectHeart = function(selectedHeart, event) {
        var heart, _j, _len1, _ref1;
        _ref1 = _this.hearts;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          heart = _ref1[_j];
          heart.selected(heart.label === selectedHeart.label);
        }
        return true;
      };
    }

    CharmsViewModel.prototype.resetWizard = function() {
      var border, chain, charm, heart, lettering, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4, _results;
      _ref = this.charms;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        charm = _ref[_i];
        charm.selected(false);
      }
      _ref1 = this.letterings;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        lettering = _ref1[_j];
        lettering.selected(false);
        lettering.lettering('');
      }
      _ref2 = this.borders;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        border = _ref2[_k];
        border.selected(false);
      }
      _ref3 = this.chains;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        chain = _ref3[_l];
        chain.selected(false);
      }
      _ref4 = this.hearts;
      _results = [];
      for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
        heart = _ref4[_m];
        _results.push(heart.selected(false));
      }
      return _results;
    };

    CharmsViewModel.prototype._sublabelToCost = function(sublabel) {
      if (sublabel === '') {
        return 0;
      }
      return parseInt(sublabel.replace('$', '').replace('+', ''), 10);
    };

    CharmsViewModel.prototype._getSelected = function(array) {
      var elem, _i, _len;
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        elem = array[_i];
        if (elem.selected()) {
          return elem;
        }
      }
      return false;
    };

    CharmsViewModel.prototype._designCustomCharm = function() {
      return $("#custom-charm-wizard-dialog").dialog("open");
    };

    CharmsViewModel.prototype._addHeartCharm = function() {
      return this._cartVM.addToCart('A heart charm', 2000, 'heart charm');
    };

    CharmsViewModel.prototype.addCustomToCart = function() {
      var border, chain, charm, hasChain, hasHeartCharm, heart, lettering, summary, total;
      total = 0;
      charm = this._getSelected(this.charms);
      summary = "A " + (charm.type.toLowerCase());
      total += charm.cost;
      lettering = this._getSelected(this.letterings);
      if (lettering.lettering() === '') {
        summary += " with no engraving";
      } else {
        summary += " engraved with '" + (lettering.lettering()) + "' in " + (lettering.label.toLowerCase());
      }
      border = this._getSelected(this.borders);
      summary += " with " + border.summaryNote;
      heart = this._getSelected(this.hearts);
      chain = this._getSelected(this.chains);
      if (!(__indexOf.call(heart.label.toLowerCase(), 'no') >= 0 && __indexOf.call(chain.label.toLowerCase(), 'no') >= 0)) {
        summary += " -- includes";
        hasHeartCharm = heart.label.toLowerCase().indexOf('no') < 0;
        hasChain = chain.label.toLowerCase().indexOf('no') < 0;
        if (hasHeartCharm) {
          summary += " a heart charm";
          total += heart.cost;
        }
        if (hasHeartCharm && hasChain) {
          summary += " and ";
        }
        if (hasChain) {
          summary += " a " + (chain.summaryNote.toLowerCase());
          total += chain.cost;
        }
      }
      this._cartVM.addToCart(summary, total, summary);
      return this.resetWizard();
    };

    return CharmsViewModel;

  })();

  CartViewModel = (function() {

    function CartViewModel() {
      this.removeItem = __bind(this.removeItem, this);

      var cart,
        _this = this;
      cart = this._getShoppingCartData();
      this.activeCart = ko.observableArray(cart);
      this.hasCartItems = ko.computed(function() {
        return _this.activeCart().length > 0;
      });
      this.cartTotal = ko.computed(function() {
        var item, total, _i, _len, _ref;
        total = 0;
        _ref = _this.activeCart();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          total += item.localPrice;
        }
        return total;
      });
    }

    CartViewModel.prototype.addToCart = function(localSummary, localPrice, paypalSummary) {
      var cart;
      cart = this._getShoppingCartData();
      cart.push({
        localSummary: localSummary,
        localPrice: localPrice,
        paypalSummary: paypalSummary,
        paypalPrice: this.centsToPrice(localPrice, false)
      });
      this.activeCart(cart);
      return this._setShoppingCartData(cart);
    };

    CartViewModel.prototype.removeItem = function(index) {
      var cart;
      if (!window.confirm("Are you sure you want to remove this item from your cart?")) {
        return;
      }
      cart = this._getShoppingCartData();
      cart.splice(index, 1);
      this.activeCart(cart);
      return this._setShoppingCartData(cart);
    };

    CartViewModel.prototype.emptyCart = function(viewModel, event) {
      if (!window.confirm("Are you sure you remove all items from your cart?")) {
        return;
      }
      this.activeCart([]);
      return this._setShoppingCartData([]);
    };

    CartViewModel.prototype._getShoppingCartData = function() {
      var data, dataStr;
      dataStr = $.cookie('shopping_cart');
      if (dataStr == null) {
        return [];
      }
      data = JSON.parse(dataStr);
      if (!Array.isArray(data)) {
        console.log('no shopping cart data');
        data = [];
      }
      return data;
    };

    CartViewModel.prototype._setShoppingCartData = function(data) {
      return $.cookie('shopping_cart', JSON.stringify(data));
    };

    CartViewModel.prototype.centsToPrice = function(cents, includeDollarSign) {
      var dollars, value;
      if (includeDollarSign == null) {
        includeDollarSign = true;
      }
      dollars = cents / 100;
      cents = cents % 100;
      if (cents < 10) {
        cents = cents + '0';
      }
      value = "" + dollars + "." + cents;
      if (includeDollarSign) {
        value = "$" + value;
      }
      return value;
    };

    return CartViewModel;

  })();

  ready = function() {
    var cartVM, charmsVM, finishWizard, hasSelection, limitCharacters, validateWizardStep, wizardDialog, wizardScopeHack,
      _this = this;
    limitCharacters = function(element, valueAccessor, allBindings, viewModel) {
      var allowedNumberOfCharacters, currentValue, cutText;
      allowedNumberOfCharacters = valueAccessor();
      currentValue = allBindings.get('textInput');
      cutText = ko.unwrap(currentValue).substr(0, allowedNumberOfCharacters);
      return currentValue(cutText);
    };
    ko.bindingHandlers.limitCharacters = {
      update: limitCharacters
    };
    wizardDialog = $("#custom-charm-wizard-dialog").dialog({
      draggable: false,
      width: "90%",
      title: "Design a Custom Charm",
      autoOpen: false
    });
    cartVM = new CartViewModel();
    ko.applyBindings(cartVM, $('#cart-container')[0]);
    charmsVM = new CharmsViewModel(cartVM);
    ko.applyBindings(charmsVM, $('#custom-charm-wizard-dialog')[0]);
    ko.applyBindings(charmsVM, $('#initial-choices')[0]);
    hasSelection = function(array) {
      var obj, _i, _len;
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        obj = array[_i];
        if (obj.selected()) {
          return true;
        }
      }
      alert('You must make a selection');
      return false;
    };
    validateWizardStep = function(elem, context) {
      if (context.fromStep > context.toStep) {
        return true;
      }
      switch (context.fromStep) {
        case 1:
          return hasSelection(charmsVM.charms);
        case 2:
          if (hasSelection(charmsVM.letterings)) {
            return true;
          } else {
            return false;
          }
          break;
        case 3:
          return hasSelection(charmsVM.borders);
        case 4:
          return hasSelection(charmsVM.hearts);
      }
      return false;
    };
    wizardScopeHack = [];
    finishWizard = function() {
      var i, numSteps, _i;
      if (hasSelection(charmsVM.chains)) {
        charmsVM.addCustomToCart();
        numSteps = 5;
        wizardScopeHack[0].smartWizard('goToStep', 1);
        for (i = _i = 2; 2 <= numSteps ? _i <= numSteps : _i >= numSteps; i = 2 <= numSteps ? ++_i : --_i) {
          console.log("disabling step: " + i);
          wizardScopeHack[0].smartWizard('disableStep', i);
        }
        return $("#custom-charm-wizard-dialog").dialog("close");
      }
    };
    return wizardScopeHack[0] = $("#custom-charm-wizard").smartWizard({
      onLeaveStep: validateWizardStep,
      labelFinish: 'Add to Cart',
      onFinish: finishWizard
    });
  };

  $(document).ready(ready);

  $(document).on('page:load', ready);

}).call(this);
