// Generated by CoffeeScript 1.10.0
(function() {
  var CartViewModel, CharmsViewModel, ready,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CharmsViewModel = (function() {
    function CharmsViewModel(cartVM) {
      this._addHeartCharm = bind(this._addHeartCharm, this);
      this._designCustomCharm = bind(this._designCustomCharm, this);
      var j, len, lettering, ref;
      this._cartVM = cartVM;
      this.isCustomState = ko.observable(false);
      this.designCharmBtn = {
        type: 'Design a Custom Charm',
        imgUrl: 'images/single_charm.jpg',
        clickCallback: this._designCustomCharm
      };
      this.heartCharmBtn = {
        type: 'Add a Heart Charm',
        imgUrl: 'images/heart_charm_spacer.jpg',
        clickCallback: this._addHeartCharm
      };
      this.charms = [
        {
          type: 'Single Charm',
          imgUrl: 'images/single_charm.jpg',
          selected: ko.observable(false),
          summaryNote: 'Single',
          sublabel: '+$20.00',
          cost: 2000
        }, {
          type: 'Double Charm',
          imgUrl: 'images/double_charm.jpg',
          selected: ko.observable(false),
          summaryNote: 'Double',
          sublabel: '+$23.00',
          cost: 2300
        }
      ];
      this.letterings = [
        {
          imgUrl: 'images/small_type.jpg',
          label: 'small letters',
          selected: ko.observable(false),
          lettering: ko.observable(''),
          summaryNote: 'Small Letters',
          maxLetters: 8
        }, {
          imgUrl: 'images/large_type.jpg',
          label: 'LARGE letters',
          selected: ko.observable(false),
          lettering: ko.observable(''),
          summaryNote: 'Large Letters',
          maxLetters: 4
        }, {
          imgUrl: 'images/mixed_type.jpg',
          label: 'MiXeD letters',
          selected: ko.observable(false),
          lettering: ko.observable(''),
          summaryNote: 'Mixed Letters',
          maxLetters: 5
        }
      ];
      this.borders = [
        {
          imgUrl: 'images/dots.jpg',
          label: 'Yes, add a dot border',
          selected: ko.observable(false),
          summaryNote: 'a dotted border'
        }, {
          imgUrl: 'images/no_dots.jpg',
          label: 'No border, please',
          selected: ko.observable(false),
          summaryNote: 'no border'
        }
      ];
      this.chains = [
        {
          imgUrl: 'images/20_inch_chain.jpg',
          label: 'Necklace (20 inches)',
          sublabel: '+$23.00',
          selected: ko.observable(false),
          summaryNote: '20-inch necklace',
          cost: 2300
        }, {
          imgUrl: 'images/7_inch_chain.jpg',
          label: 'Bracelet (7.5 inches)',
          sublabel: '+$12.00',
          selected: ko.observable(false),
          summaryNote: '7-inch bracelet',
          cost: 1200
        }, {
          imgUrl: 'images/noChainPlease.jpg',
          label: 'No Chain',
          sublabel: '',
          selected: ko.observable(false),
          summaryNote: '(chain not included)'
        }
      ];
      this.hearts = [
        {
          imgUrl: 'images/heart_charm_spacer.jpg',
          label: 'Yes!',
          sublabel: '+$20.00',
          selected: ko.observable(false),
          summaryNote: 'Yes',
          cost: 2000
        }, {
          imgUrl: 'images/noHeartCharm.jpg',
          label: 'No thank you',
          sublabel: '',
          selected: ko.observable(false),
          summaryNote: 'No'
        }
      ];
      ref = this.letterings;
      for (j = 0, len = ref.length; j < len; j++) {
        lettering = ref[j];
        lettering.remaining = (function(_this) {
          return function(lettering) {
            return ko.computed(function(foo) {
              var left;
              left = lettering.maxLetters - lettering.lettering().length;
              return left + ' characters remaining';
            });
          };
        })(this)(lettering);
      }
      this.selectCharm = (function(_this) {
        return function(selectedCharm, event) {
          var charm, k, len1, ref1;
          ref1 = _this.charms;
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            charm = ref1[k];
            charm.selected(charm.type === selectedCharm.type);
          }
          return true;
        };
      })(this);
      this.selectLettering = (function(_this) {
        return function(selectedLettering, event) {
          var k, len1, ref1;
          ref1 = _this.letterings;
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            lettering = ref1[k];
            lettering.selected(lettering.label === selectedLettering.label);
          }
          return true;
        };
      })(this);
      this.selectBorder = (function(_this) {
        return function(selectedBorder, event) {
          var border, k, len1, ref1;
          ref1 = _this.borders;
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            border = ref1[k];
            border.selected(border.label === selectedBorder.label);
          }
          return true;
        };
      })(this);
      this.selectChain = (function(_this) {
        return function(selectedChain, event) {
          var chain, k, len1, ref1;
          ref1 = _this.chains;
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            chain = ref1[k];
            chain.selected(chain.label === selectedChain.label);
          }
          return true;
        };
      })(this);
      this.selectHeart = (function(_this) {
        return function(selectedHeart, event) {
          var heart, k, len1, ref1;
          ref1 = _this.hearts;
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            heart = ref1[k];
            heart.selected(heart.label === selectedHeart.label);
          }
          return true;
        };
      })(this);
    }

    CharmsViewModel.prototype.resetWizard = function() {
      var border, chain, charm, heart, j, k, l, len, len1, len2, len3, len4, lettering, m, n, ref, ref1, ref2, ref3, ref4, results;
      ref = this.charms;
      for (j = 0, len = ref.length; j < len; j++) {
        charm = ref[j];
        charm.selected(false);
      }
      ref1 = this.letterings;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        lettering = ref1[k];
        lettering.selected(false);
        lettering.lettering('');
      }
      ref2 = this.borders;
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        border = ref2[l];
        border.selected(false);
      }
      ref3 = this.chains;
      for (m = 0, len3 = ref3.length; m < len3; m++) {
        chain = ref3[m];
        chain.selected(false);
      }
      ref4 = this.hearts;
      results = [];
      for (n = 0, len4 = ref4.length; n < len4; n++) {
        heart = ref4[n];
        results.push(heart.selected(false));
      }
      return results;
    };

    CharmsViewModel.prototype._sublabelToCost = function(sublabel) {
      if (sublabel === '') {
        return 0;
      }
      return parseInt(sublabel.replace('$', '').replace('+', ''), 10);
    };

    CharmsViewModel.prototype._getSelected = function(array) {
      var elem, j, len;
      for (j = 0, len = array.length; j < len; j++) {
        elem = array[j];
        if (elem.selected()) {
          return elem;
        }
      }
      return false;
    };

    CharmsViewModel.prototype._designCustomCharm = function() {
      return $("#custom-charm-wizard-dialog").dialog("open");
    };

    CharmsViewModel.prototype._addHeartCharm = function() {
      return this._cartVM.addToCart('A heart charm', 2000, 'heart charm');
    };

    CharmsViewModel.prototype.addCustomToCart = function() {
      var border, chain, charm, hasChain, hasHeartCharm, heart, lettering, summary, total;
      total = 0;
      charm = this._getSelected(this.charms);
      summary = "A " + (charm.type.toLowerCase());
      total += charm.cost;
      lettering = this._getSelected(this.letterings);
      if (lettering.lettering() === '') {
        summary += " with no engraving";
      } else {
        summary += " engraved with '" + (lettering.lettering()) + "' in " + (lettering.label.toLowerCase());
      }
      border = this._getSelected(this.borders);
      summary += " with " + border.summaryNote;
      heart = this._getSelected(this.hearts);
      chain = this._getSelected(this.chains);
      if (!(indexOf.call(heart.label.toLowerCase(), 'no') >= 0 && indexOf.call(chain.label.toLowerCase(), 'no') >= 0)) {
        summary += " -- includes";
        hasHeartCharm = heart.label.toLowerCase().indexOf('no') < 0;
        hasChain = chain.label.toLowerCase().indexOf('no') < 0;
        if (hasHeartCharm) {
          summary += " a heart charm";
          total += heart.cost;
        }
        if (hasHeartCharm && hasChain) {
          summary += " and ";
        }
        if (hasChain) {
          summary += " a " + (chain.summaryNote.toLowerCase());
          total += chain.cost;
        }
      }
      this._cartVM.addToCart(summary, total, summary);
      return this.resetWizard();
    };

    return CharmsViewModel;

  })();

  CartViewModel = (function() {
    function CartViewModel() {
      this.removeItem = bind(this.removeItem, this);
      var cart;
      cart = this._getShoppingCartData();
      this.activeCart = ko.observableArray(cart);
      this.hasCartItems = ko.computed((function(_this) {
        return function() {
          return _this.activeCart().length > 0;
        };
      })(this));
      this.cartTotal = ko.computed((function(_this) {
        return function() {
          var item, j, len, ref, total;
          total = 0;
          ref = _this.activeCart();
          for (j = 0, len = ref.length; j < len; j++) {
            item = ref[j];
            total += item.localPrice;
          }
          return total;
        };
      })(this));
    }

    CartViewModel.prototype.addToCart = function(localSummary, localPrice, paypalSummary) {
      var cart;
      cart = this._getShoppingCartData();
      cart.push({
        localSummary: localSummary,
        localPrice: localPrice,
        paypalSummary: paypalSummary,
        paypalPrice: this.centsToPrice(localPrice, false)
      });
      this.activeCart(cart);
      return this._setShoppingCartData(cart);
    };

    CartViewModel.prototype.removeItem = function(index) {
      var cart;
      if (!window.confirm("Are you sure you want to remove this item from your cart?")) {
        return;
      }
      cart = this._getShoppingCartData();
      cart.splice(index, 1);
      this.activeCart(cart);
      return this._setShoppingCartData(cart);
    };

    CartViewModel.prototype.emptyCart = function(viewModel, event) {
      if (!window.confirm("Are you sure you remove all items from your cart?")) {
        return;
      }
      this.activeCart([]);
      return this._setShoppingCartData([]);
    };

    CartViewModel.prototype._getShoppingCartData = function() {
      var data, dataStr;
      dataStr = $.cookie('shopping_cart');
      if (dataStr == null) {
        return [];
      }
      data = JSON.parse(dataStr);
      if (!Array.isArray(data)) {
        console.log('no shopping cart data');
        data = [];
      }
      return data;
    };

    CartViewModel.prototype._setShoppingCartData = function(data) {
      return $.cookie('shopping_cart', JSON.stringify(data));
    };

    CartViewModel.prototype.centsToPrice = function(cents, includeDollarSign) {
      var dollars, value;
      if (includeDollarSign == null) {
        includeDollarSign = true;
      }
      dollars = cents / 100;
      cents = cents % 100;
      if (cents < 10) {
        cents = cents + '0';
      }
      value = dollars + "." + cents;
      if (includeDollarSign) {
        value = "$" + value;
      }
      return value;
    };

    return CartViewModel;

  })();

  ready = function() {
    var cartVM, charmsVM, finishWizard, hasSelection, limitCharacters, validateWizardStep, wizardDialog, wizardScopeHack;
    limitCharacters = (function(_this) {
      return function(element, valueAccessor, allBindings, viewModel) {
        var allowedNumberOfCharacters, currentValue, cutText;
        allowedNumberOfCharacters = valueAccessor();
        currentValue = allBindings.get('textInput');
        cutText = ko.unwrap(currentValue).substr(0, allowedNumberOfCharacters);
        return currentValue(cutText);
      };
    })(this);
    ko.bindingHandlers.limitCharacters = {
      update: limitCharacters
    };
    wizardDialog = $("#custom-charm-wizard-dialog").dialog({
      draggable: false,
      width: "90%",
      title: "Design a Custom Charm",
      autoOpen: false
    });
    cartVM = new CartViewModel();
    ko.applyBindings(cartVM, $('#cart-container')[0]);
    charmsVM = new CharmsViewModel(cartVM);
    ko.applyBindings(charmsVM, $('#custom-charm-wizard-dialog')[0]);
    ko.applyBindings(charmsVM, $('#initial-choices')[0]);
    hasSelection = function(array) {
      var j, len, obj;
      for (j = 0, len = array.length; j < len; j++) {
        obj = array[j];
        if (obj.selected()) {
          return true;
        }
      }
      alert('You must make a selection');
      return false;
    };
    validateWizardStep = (function(_this) {
      return function(elem, context) {
        if (context.fromStep > context.toStep) {
          return true;
        }
        switch (context.fromStep) {
          case 1:
            return hasSelection(charmsVM.charms);
          case 2:
            if (hasSelection(charmsVM.letterings)) {
              return true;
            } else {
              return false;
            }
            break;
          case 3:
            return hasSelection(charmsVM.borders);
          case 4:
            return hasSelection(charmsVM.hearts);
        }
        return false;
      };
    })(this);
    wizardScopeHack = [];
    finishWizard = function() {
      var i, j, numSteps, ref;
      if (hasSelection(charmsVM.chains)) {
        charmsVM.addCustomToCart();
        numSteps = 5;
        wizardScopeHack[0].smartWizard('goToStep', 1);
        for (i = j = 2, ref = numSteps; 2 <= ref ? j <= ref : j >= ref; i = 2 <= ref ? ++j : --j) {
          console.log("disabling step: " + i);
          wizardScopeHack[0].smartWizard('disableStep', i);
        }
        return $("#custom-charm-wizard-dialog").dialog("close");
      }
    };
    return wizardScopeHack[0] = $("#custom-charm-wizard").smartWizard({
      onLeaveStep: validateWizardStep,
      labelFinish: 'Add to Cart',
      onFinish: finishWizard
    });
  };

  $(document).ready(ready);

  $(document).on('page:load', ready);

}).call(this);
