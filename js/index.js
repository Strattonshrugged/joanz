// Generated by CoffeeScript 1.4.0
(function() {
  var CharmsViewModel, ready;

  CharmsViewModel = (function() {

    function CharmsViewModel() {
      var cart,
        _this = this;
      this.charms = [
        {
          type: 'Single Charm',
          imgUrl: 'images/single_charm.jpg',
          url: 'customize.php?type=single',
          selected: ko.observable(true),
          summaryNote: 'Single'
        }, {
          type: 'Double Charm',
          imgUrl: 'images/double_charm.jpg',
          url: 'customize.php?type=double',
          selected: ko.observable(false),
          summaryNote: 'Double'
        }
      ];
      this.letterings = [
        {
          imgUrl: 'images/small_type.jpg',
          label: 'small letters',
          selected: ko.observable(true),
          lettering: ko.observable('hello'),
          summaryNote: 'Small Letters'
        }, {
          imgUrl: 'images/large_type.jpg',
          label: 'LARGE letters',
          selected: ko.observable(false),
          lettering: ko.observable('hello'),
          summaryNote: 'Large Letters'
        }, {
          imgUrl: 'images/mixed_type.jpg',
          label: 'MiXeD letters',
          selected: ko.observable(false),
          lettering: ko.observable('hello'),
          summaryNote: 'Mixed Letters'
        }
      ];
      this.borders = [
        {
          imgUrl: 'images/dots.jpg',
          label: 'Yes, please add a dot border',
          selected: ko.observable(true),
          summaryNote: 'Dotted Border'
        }, {
          imgUrl: 'images/no_dots.jpg',
          label: 'No border, please',
          selected: ko.observable(false),
          summaryNote: 'No Border'
        }
      ];
      this.chains = [
        {
          imgUrl: 'images/7_inch_chain.jpg',
          label: 'Ball Chain (7 inches)',
          sublabel: '12.00',
          selected: ko.observable(false),
          summaryNote: '7-inche ball chain'
        }, {
          imgUrl: 'images/20_inch_chain.jpg',
          label: 'Ball Chain (20 inches)',
          sublabel: '$23.00',
          selected: ko.observable(true),
          summaryNote: '20-inche ball chain'
        }
      ];
      this.hearts = [
        {
          imgUrl: 'images/heart_charm_spacer.jpg',
          label: 'Yes, add a heart charm',
          sublabel: '+$20.00',
          selected: ko.observable(false),
          summaryNote: 'Yes'
        }, {
          imgUrl: 'images/single_charm_select.jpg',
          label: 'No heart charm, please',
          sublabel: '',
          selected: ko.observable(true),
          summaryNote: 'No'
        }
      ];
      this.letterings[0].remaining = ko.computed(function(foo) {
        var left;
        left = 10 - _this.letterings[0].lettering().length;
        return left + ' characters remaining';
      });
      this.letterings[1].remaining = ko.computed(function(foo) {
        var left;
        left = 10 - _this.letterings[1].lettering().length;
        return left + ' characters remaining';
      });
      this.letterings[2].remaining = ko.computed(function(foo) {
        var left;
        left = 10 - _this.letterings[2].lettering().length;
        return left + ' characters remaining';
      });
      this.selectCharm = function(selectedCharm, event) {
        var charm, _i, _len, _ref, _results;
        _ref = _this.charms;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          charm = _ref[_i];
          _results.push(charm.selected(charm.type === selectedCharm.type));
        }
        return _results;
      };
      this.selectLettering = function(selectedLettering, event) {
        var lettering, _i, _len, _ref, _results;
        _ref = _this.letterings;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          lettering = _ref[_i];
          _results.push(lettering.selected(lettering.label === selectedLettering.label));
        }
        return _results;
      };
      this.selectBorder = function(selectedBorder, event) {
        var border, _i, _len, _ref, _results;
        _ref = _this.borders;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          border = _ref[_i];
          _results.push(border.selected(border.label === selectedBorder.label));
        }
        return _results;
      };
      this.selectChain = function(selectedChain, event) {
        var chain, _i, _len, _ref, _results;
        _ref = _this.chains;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          chain = _ref[_i];
          _results.push(chain.selected(chain.label === selectedChain.label));
        }
        return _results;
      };
      this.selectHeart = function(selectedHeart, event) {
        var heart, _i, _len, _ref, _results;
        _ref = _this.hearts;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          heart = _ref[_i];
          _results.push(heart.selected(heart.label === selectedHeart.label));
        }
        return _results;
      };
      this.selectedSummary = ko.computed(function() {
        var border, borderStyle, chain, chainStyle, charm, charmStyle, includeHeart, lettering, letteringStyle, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
        _ref = _this.charms;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          charm = _ref[_i];
          if (charm.selected()) {
            charmStyle = charm.summaryNote;
          }
        }
        _ref1 = _this.letterings;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          lettering = _ref1[_j];
          if (lettering.selected()) {
            letteringStyle = lettering.summaryNote;
          }
        }
        _ref2 = _this.borders;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          border = _ref2[_k];
          if (border.selected()) {
            borderStyle = border.summaryNote;
          }
        }
        _ref3 = _this.chains;
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          chain = _ref3[_l];
          if (chain.selected()) {
            chainStyle = chain.summaryNote;
          }
        }
        if (_this.hearts[0].selected()) {
          includeHeart = _this.hearts[0].summaryNote;
        } else {
          includeHeart = _this.hearts[1].summaryNote;
        }
        return {
          charmStyle: charmStyle,
          letteringStyle: letteringStyle,
          borderStyle: borderStyle,
          chainStyle: chainStyle,
          includeHeart: includeHeart,
          price: '$39'
        };
      });
      cart = this._getShoppingCartData();
      console.log(cart);
      this.shoppingCart = ko.observableArray([]);
      this.addToCart = function(viewModel, event) {
        var item;
        item = viewModel.selectedSummary();
        cart = this._getShoppingCartData();
        cart.push(item);
        this.activeCart(cart);
        return this._setShoppingCartData(cart);
      };
      this.emptyCart = function(viewModel, event) {
        return this._setShoppingCartData([]);
      };
      this.activeCart = ko.observableArray(this._getShoppingCartData());
      this.hasCartItems = ko.computed(function() {
        return _this.activeCart().length > 0;
      });
    }

    CharmsViewModel.prototype._getShoppingCartData = function() {
      var data, dataStr;
      dataStr = $.cookie('shopping_cart');
      if (dataStr == null) {
        return [];
      }
      data = JSON.parse(dataStr);
      if (!Array.isArray(data)) {
        console.log('no shopping cart data');
        data = [];
      }
      return data;
    };

    CharmsViewModel.prototype._setShoppingCartData = function(data) {
      console.log('setting shopping cart data');
      return $.cookie('shopping_cart', JSON.stringify(data));
    };

    return CharmsViewModel;

  })();

  ready = function() {
    return ko.applyBindings(new CharmsViewModel());
  };

  $(document).ready(ready);

  $(document).on('page:load', ready);

}).call(this);
